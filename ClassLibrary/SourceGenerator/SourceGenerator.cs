using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using System.IO;

using System.ComponentModel;
using System.ComponentModel.DataAnnotations;



namespace ClassLibrary
{
    /// <summary>
    /// Класс генерации исходного кода для ПЛК
    /// </summary>
    public class SourceGenerator
    {
        private static string copyright = "//--- Generated by OneClick Automation SourceGenerator v.2.0 ---";
        private static string closeOB = "END_ORGANIZATION_BLOCK";
        private static string closeFC = "END_FUNCTION";
        private static string templatesFolder = "CodeTemplates";


        private string _rootdir;

        public string rootdir
        {
            get { return _rootdir; }
            set { _rootdir = value; }
        }

        private List<mCategory> _categories;
        public List<mCategory> categories
        {
            get { return _categories; }
            set { _categories = value; }
        }

        private List<mDataBlock> _uniqDBlist;
        public List<mDataBlock> uniqDBlist
        {
            get { return _uniqDBlist; }
            set { _uniqDBlist = value; }
        }

        public SourceGenerator()
        {
            categories = new List<mCategory>();
            uniqDBlist = new List<mDataBlock>();
        }

        public SourceGenerator(List<mCategory> CategoriesList)
        {
            categories = new List<mCategory>(CategoriesList);
            uniqDBlist = new List<mDataBlock>();
            generate_UniqDBList();
        }

        public bool isEmptyCategories()
        {
            bool isEmpty = true;
            if (this.categories.Count > 0) isEmpty = false;
            return isEmpty;
        }

        public bool isEmptyDBlist()
        {
            bool isEmpty = true;
            if (this.uniqDBlist.Count > 0) isEmpty = false;
            return isEmpty;
        }

        /// <summary>
        /// Создание файлов с текстами исходного кода для
        /// программы ПЛК
        /// </summary>
        /// <param name="rootdir"></param>
        public void printAllSourcesToFiles(string dir)
        {
            rootdir = dir + "\\";
            string filename = rootdir;

            Directory.CreateDirectory(rootdir);

            foreach (mCategory cat in categories)
            {
                cat.sortCollectionByCodename();
                if (cat.S7items.Count > 0)
                {
                    filename = rootdir + "STL_" + cat.FCname + ".txt";
                    print_ListToFile(filename, print_PeripheryForCategory(cat));
                }
            }

            filename = rootdir + "STL_DataBlocks.txt";
            print_ListToFile(filename, generateSTL_DataBlocks());

            filename = rootdir + "SCL_ProcessingSensorsLogic.txt";           
            string [] s = {"SNS","SNL", "SNC"};
            print_ListToFile(filename, generateSCL_FCLogic(s));

            string[] d = { "DRV", "PMP", "VLV" };
            filename = rootdir + "SCL_ProcessingDevicesLogic.txt";            
            print_ListToFile(filename, generateSCL_FCLogic(d));

            filename = rootdir + "STL_GroupControl.txt";
            print_ListToFile(filename, generateSTL_GroupControl());

            filename = rootdir + "STL_OB35.txt";
            print_ListToFile(filename, generateSTL_OB35code());

            filename = rootdir + "STL_Logic_SNC.txt";
            print_ListToFile(filename, generateSTL_LogicSNC(69));
        }

        /// <summary>
        /// Генерация полей с текстом исходного кода для всех элементов коллекции
        /// </summary>
        /// <returns></returns>
        public bool set_PeripheryFields()
        {
            bool isGenerated = false;
            if (!isEmptyCategories())
            {
                foreach (mCategory cat in categories)
                {
                    foreach (mSymbolTableItem el in cat.S7items)
                    {
                        foreach (string s in return_PeripheryCode(el))
                        {
                            mBaseEntity e = new mBaseEntity();
                            e.Name = s;
                            el.peripheryCode.Add(e);
                        }
                        

                        if (el.DeviceType.Equals("B")) el.DeviceTag = "I_on";
                    }
                }
                isGenerated = true;
            }
            return isGenerated;
        }

        /// <summary>
        /// Генерация текста исходного кода опроса периферии
        /// для программы ПЛК для заданной категории сигналов
        /// </summary>
        /// <param name="cat">Категория сигналов</param>
        /// <returns></returns>
        private List<string> print_PeripheryForCategory(mCategory cat)
        {
            List<string> buffer = new List<string>();

            buffer.AddRange(source_FCopen(cat.FCname));

            string s = "";

            foreach (mSymbolTableItem el in cat.S7items)
            {
                if (!s.Equals(el.Codename))
                {
                    s = el.Codename;
                    buffer.Add("NETWORK");
                    buffer.Add("TITLE = " + el.Codename);
                }
            
                buffer.AddRange(el.peripheryCode.Select(p => p.Name).ToList());
                buffer.Add("");
                buffer.Add("");
            }

            buffer.AddRange(source_FCclose());

            return buffer;
        }


        public List<string> print_PeripheryForCategory(string categoryName)
        {
            List<string> buffer = new List<string>();

            foreach (mCategory cat in categories)
            {
                if (cat.Name.Equals(categoryName))
                {
                    buffer.AddRange(source_FCopen(cat.FCname));

                    string s = "";

                    foreach (mSymbolTableItem el in cat.S7items)
                    {
                        if (!s.Equals(el.Codename))
                        {
                            s = el.Codename;
                            buffer.Add("NETWORK");
                            buffer.Add("TITLE = " + el.Codename);
                        }

                        buffer.AddRange(el.peripheryCode.Select(p => p.Name).ToList());
                        buffer.Add("");
                        buffer.Add("");
                    }

                    buffer.AddRange(source_FCclose());
                }
            }
 
            return buffer;
        }

        /// <summary>
        /// Вывод списка строк в текстовый файл
        /// </summary>
        /// <param name="filename">Имя файла (полное, с указанием пути)</param>
        /// <param name="list">Список строк</param>
        private void print_ListToFile(string filename, List<string> list)
        {
            StreamWriter file = new StreamWriter(filename);

            file.WriteLine(copyright);

            foreach (string line in list)
            {
                file.WriteLine(line);
            }

            file.Close();
        }


        /// <summary>
        /// Выгрузка списка блоков данных в строковый двумерный массив
        /// </summary>
        /// <returns></returns>
        public String[,] printDBlistToArray()
        {
            var arr = new string[0, 0];

            if (!isEmptyDBlist())
            {
                List<string> list = new List<string>();
                list = uniqDBlist[0].return_DBinRowForPrint();

                arr = new string[this.uniqDBlist.Count, list.Count];
                int i = 0;

                foreach (mDataBlock el in uniqDBlist)
                {
                    list = el.return_DBinRowForPrint();
                    int j = 0;
                    foreach (string s in list)
                    {
                        arr[i, j] = s;
                        j++;
                    }
                    i++;
                }
            }
            return arr;
        }


        /// <summary>
        /// Создание списка элементов с неповторяющимся номеров блока данных
        /// </summary>
        /// <returns></returns>
        private bool generate_UniqDBList()
        {
            bool isGenerated = false;

            if (!isEmptyCategories())
            {
                List<String> SysNumList = new List<string>();
                List<mSymbolTableItem> uniqSymbolsList = new List<mSymbolTableItem>();

                foreach (mCategory cat in this.categories.OrderBy(k => k.Id))
                {
                    foreach (mSymbolTableItem el in cat.S7items.OrderByDescending(key => key.DB_ArrayIndex))
                    {
                        if (!SysNumList.Contains(el.DB_FullName))
                        {
                            SysNumList.Add(el.DB_FullName);
                            uniqSymbolsList.Add(el);
                            isGenerated = true;
                        }
                    }
                    SysNumList.Clear();

                    foreach (mSymbolTableItem el in uniqSymbolsList.OrderBy(k => k.SystemNumber))
                    {
                        mDataBlock db = new mDataBlock();
                        // 11Y
                        if (el.DB_ArrayName.Equals("PID"))
                        {
                            db.SymbolName = "PID" + el.Codename;
                            db.Title = el.SignalComment;
                        }
                        else
                        {
                            db.SymbolName = el.SystemNumber + cat.DB.Symbol;
                            // Sensors 4-20
                            db.Title = cat.Description;
                        }
                      
                        // DB111
                        db.FullName = el.DB_FullName;



                        // SNS_UDT
                        db.UDT_Name = cat.DB.UDT_Name;

                        // Rounded size of DB Array[]
                        db.MaxArrayIndex = roundToFive(el.DB_ArrayIndex);

                        // SNS
                        db.ArrayName = cat.DB.ArrayName;

                        uniqDBlist.Add(db);

                        isGenerated = true;
                    }

                    uniqSymbolsList.Clear();
                }
            }

            return isGenerated;
        }

        /// <summary>
        /// Генерация текста исходного кода в синтаксисе STL 
        /// для последующего создания блоков данных в программе ПЛК
        /// </summary>
        /// <returns></returns>
        private List<String> generateSTL_DataBlocks()
        {
            List<string> list = new List<string>();

            foreach (mDataBlock db in uniqDBlist)
            {
                if (db.ArrayName.Equals("PID"))
                {
                    list.AddRange(generateSTL_instanceDB(db));
                }
                else 
                    list.AddRange(generateSTL_DB(db));
            }

            return list;
        }

        /// <summary>
        /// Генерация текста исходного кода в синтаксисе STL 
        /// для последующего создания Data Block в программе ПЛК
        /// </summary>
        /// <returns></returns>
        private List<String> generateSTL_DB(mDataBlock db)
        {
            List<string> list = new List<string>();

                list.Add("DATA_BLOCK " + db.FullName);
                list.Add("TITLE =" + db.Title);
                list.Add("AUTHOR:  Kratovi4");
                list.Add("VERSION : 2.0");
                list.Add("STRUCT");
                list.Add(db.ArrayName + ": ARRAY  [1 .. " + db.MaxArrayIndex + "] OF //Array");
                list.Add("\"" + db.UDT_Name + "\";");
                list.Add("END_STRUCT ;");
                list.Add("BEGIN");
                list.Add("END_DATA_BLOCK");
                list.Add("\r\n");
        
            return list;
        }


        /// <summary>
        /// Генерация текста исходного кода в синтаксисе STL 
        /// для последующего создания Instance DB на базе FB1 программе ПЛК
        /// </summary>
        /// <returns></returns>
        private List<String> generateSTL_instanceDB(mDataBlock db)
        {
            List<string> list = new List<string>();

                list.Add("DATA_BLOCK " + db.FullName);
                list.Add("TITLE =" + db.Title);
                list.Add("{ S7_techparam := 'S7WRSAPX.Application' }");
                list.Add("AUTHOR:  Kratovi4");
                list.Add("FAMILY : STDCONT");
                list.Add("VERSION : 1.0");
                list.Add("FB 1");
                list.Add("BEGIN");
                list.Add("END_DATA_BLOCK");
                list.Add("\r\n");

            return list;
        }

        /// <summary>
        /// Генерация текста исходного кода в синтаксисе SCL 
        /// для создания функций-обработчиков логики в программе ПЛК
        /// </summary>
        /// <returns></returns>
        private List<String> generateSCL_FCLogic(string[] forWhat)
        {
            List<string> list = new List<string>();
            List<mDataBlock> sorted = new List<mDataBlock>(uniqDBlist.OrderBy(k => k.ArrayName).ThenBy(k => k.MaxArrayIndex));
            List<int> countList = new List<int>();

            list.AddRange(parse_codeFromFile(rootdir + "\\" + templatesFolder + "\\openSCLcode.txt"));

            foreach (mDataBlock db in sorted)
            {
                if (!countList.Contains(db.MaxArrayIndex))
                {
                    countList.Add(db.MaxArrayIndex);
                }
            }

            foreach (int uniq in countList.OrderBy(k => k))
            {
                
                list.Add("FOR i:=1 TO " + uniq.ToString() + " BY 1 DO");
         
                    foreach (mDataBlock db in sorted)
                    {
                        if ( (db.MaxArrayIndex == uniq) & (forWhat.Any(item => item == db.ArrayName)) )
                            list.Add(generateSCL_LogicCode(db));
                    }
                
                list.Add("END_FOR; ");
                list.Add("");
            }

            list.Add(closeFC);

            return list;
        }


        private string generateSCL_LogicCode(mDataBlock db)
        {
            string s = "";

                // we need something like this: Logic_SNS(SENSOR:="11A".SNS[i]); // 20
                s = "Logic_";
                s += db.ArrayName + "(" + db.ArrayName + ":=";
                s += "\"" + db.SymbolName + "\"";
                s += "." + db.ArrayName + "[i]";

                if (db.ArrayName.Equals("SNS") | db.ArrayName.Equals("SNC"))
                {
                    s += ");  // " + db.MaxArrayIndex.ToString();
                }
                else
                {
                    s += ",Clock:=clk); // " + db.MaxArrayIndex.ToString();
                }

            return s;
        }

        /// <summary>
        /// Генерация текста исходного кода
        /// для группового управления устройствами типа DRV
        /// </summary>
        /// <returns></returns>
        private List<string> generateSTL_GroupControl()
        {
            List<string> buffer = new List<string>();
            List<string> buffer_ModeA = new List<string>();
            List<string> buffer_ModeM = new List<string>();
            List<string> buffer_Ack = new List<string>();

            List<string> buffer_BlockOn_On = new List<string>();
            List<string> buffer_BlockOff_On = new List<string>();

            List<string> buffer_BlockOn_Off = new List<string>();
            List<string> buffer_BlockOff_Off = new List<string>();

            foreach (mCategory cat in categories)
            {
                if (cat.DB.ArrayName.ToString().Equals("DRV"))
                {
                    foreach (mSymbolTableItem drv in cat.S7items.OrderBy(k => k.SystemNumber).ThenBy(k => k.DB_ArrayIndex) ) 
                    {
                        if (drv.DeviceTag.Equals("Ctr"))
                        {
                            buffer_ModeA.Add("R " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Mode");
                            buffer_ModeM.Add("S " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Mode");
                            buffer_Ack.Add("S " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Ack");

                            buffer_BlockOn_On.Add("S " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Block_on");
                            buffer_BlockOn_Off.Add("R " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Block_on");

                            buffer_BlockOff_On.Add("S " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Block_off");
                            buffer_BlockOff_Off.Add("R " + drv.DB_FullName + ".DRV[" + drv.DeviceNumber + "].Block_off");
                        }
                    }

                    string obj = cat.DB.ArrayName + cat.DB.Symbol;

                    buffer.Add("//--- Групповое управление ---");
                    buffer.Add("//--- " + cat.Description);
                    buffer.Add("//--- Все в автомат");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".MODE_AUTO");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".MODE_AUTO_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "_MA");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".MODE_AUTO");                  
                    buffer.Add(" ");
                    buffer.AddRange(buffer_ModeA);
                    buffer.Add(cat.DB.Symbol + "_MA" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Все в ручной");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".MODE_MAN");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".MODE_MAN_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "_MM");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".MODE_MAN");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_ModeM);
                    buffer.Add(cat.DB.Symbol + "_MM" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Все квитировать");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".ACK_ALL");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".ACK_ALL_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "ACK");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".ACK_ALL");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_Ack);
                    buffer.Add(cat.DB.Symbol + "ACK" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Блокировать I_on");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".SET_BLOCK_ON_ALL");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".SET_BLOCK_ON_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "SBON");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".SET_BLOCK_ON_ALL");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_BlockOn_On);
                    buffer.Add(cat.DB.Symbol + "SBON" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Разблокировать I_on");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".RST_BLOCK_ON_ALL");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".RST_BLOCK_ON_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "RBON");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".RST_BLOCK_ON_ALL");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_BlockOn_Off);
                    buffer.Add(cat.DB.Symbol + "RBON" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Блокировать I_off");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".SET_BLOCK_OFF_ALL");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".SET_BLOCK_OFF_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "SBOFF");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".SET_BLOCK_OFF_ALL");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_BlockOff_On);
                    buffer.Add(cat.DB.Symbol + "SBOFF" + ": NOP 0");
                    buffer.Add(" ");

                    buffer.Add("//--- Разблокировать I_off");
                    buffer.Add("A \"DB_OPTIONS\"." + obj + ".RST_BLOCK_OFF_ALL");
                    buffer.Add("FP \"DB_OPTIONS\"." + obj + ".RST_BLOCK_OFF_FP");
                    buffer.Add("JNB " + cat.DB.Symbol + "RBOFF");
                    buffer.Add("R \"DB_OPTIONS\"." + obj + ".RST_BLOCK_OFF_ALL");
                    buffer.Add(" ");
                    buffer.AddRange(buffer_BlockOff_Off);
                    buffer.Add(cat.DB.Symbol + "RBOFF" + ": NOP 0");
                    buffer.Add(" ");
                }
            }

            buffer_ModeM = null;
            buffer_ModeA = null;
            buffer_Ack = null;

            return buffer;
        }

        /// <summary>
        /// Генерация текста исходного кода для блока обработки ПИД-регуляторов
        /// </summary>
        /// <returns></returns>
        private List<string> generateSTL_OB35code()
        {
            List<string> buffer = new List<string>();

            buffer.Add("//--- This code is in test mode!!");
            buffer.AddRange(parse_codeFromFile(rootdir + "\\" + templatesFolder + "\\openOB35code.txt"));

            foreach (mCategory cat in categories)
            {
                if (cat.DB.ArrayName.ToString().Equals("PID"))
                {
                    foreach (mSymbolTableItem pid in cat.S7items.OrderBy(k => k.SystemNumber).ThenBy(k => k.DB_ArrayIndex))
                    {
                        buffer.Add("NETWORK");
                        buffer.Add("TITLE =" + pid.Codename);
                        buffer.Add("//--- Process value");
                        buffer.Add("//--- " + pid.SystemNumber + "A" + pid.DeviceNumber);
                        buffer.Add("L \"" + pid.SystemNumber + "A\".SNS[" + pid.DeviceNumber + "].value;");
                        buffer.Add("T " + pid.DB_FullName + ".PV_IN;");

                        buffer.Add("CALL FB1, " + pid.DB_FullName);
                        buffer.Add("( COM_RST:= #RESET,");
                        buffer.Add("CYCLE:= #CYCLE);");
                        buffer.Add("");

                        buffer.Add("//--- Periphery out value");
                        buffer.Add("L " + pid.DB_FullName + ".LMN_PER;");
                        buffer.Add("T " + pid.SignalName + ";");
                        buffer.Add("\r\n\r\n");
                    }
                }
            }

            buffer.Add(closeOB);
            return buffer;
        }

        /// <summary>
        /// Возвращает текст исходного кода на STL для функций 
        /// обработки логики импульсных счетчиков
        /// </summary>
        /// <param name="M">Стартовый адрес для меркерного пространства</param>
        /// <returns></returns>
        private List<string> generateSTL_LogicSNC(int M)
        {
            List<string> buffer = new List<string>();

            buffer.Add("//--- SNC Logic auto generated code");
            buffer.Add("");
            
            int startLabel = 1001; // start label for Jump Commands

            foreach (mCategory cat in categories)
            {
                if (cat.DB.ArrayName.ToString().Equals("SNC"))
                {
                    foreach (mSymbolTableItem item in cat.S7items.OrderBy(k => k.SystemNumber).ThenBy(k => k.DB_ArrayIndex))
                    {
                        string baseName = item.DB_FullName + "." + item.DB_ArrayName + "[" + item.DB_ArrayIndex + "].";     // DB109.SNC[3].
                        int bit = 0;                                                                                        // bit number in merker, like M69.0

                        buffer.Add("");
                        buffer.Add("//--- Счетчик " + item.Codename);
                        buffer.Add("// Захват импульса");
                        buffer.Add("A " + item.SignalName);
                        buffer.Add("FP M" + M.ToString() + "." + bit.ToString());
                        buffer.Add("=" + baseName + item.DeviceTag);
                        buffer.Add("");
                        buffer.Add("// Инкремент счетчика на заданный шаг");
                        buffer.Add("A " + baseName + item.DeviceTag);
                        buffer.Add("A " + baseName + "start_count");
                        buffer.Add("JNB " + startLabel.ToString());
                        buffer.Add("L " + baseName + "summator");
                        buffer.Add("L " + baseName + "step");
                        buffer.Add("+D");
                        buffer.Add("T " +baseName + "summator");
                        buffer.Add(startLabel.ToString() + ": NOP 0");
                        buffer.Add("");
                        buffer.Add("// Сброс счетчика");
                        buffer.Add("A " + baseName + "reset_counter");
                        bit++;
                        buffer.Add("FP M" + M.ToString() + "." + bit.ToString());
                        buffer.Add("JCN " + startLabel++.ToString());
                        buffer.Add("L " + baseName + "summator");
                        buffer.Add("T " + baseName + "summator_prev");
                        buffer.Add("L 0");
                        buffer.Add("T " + baseName + "summator");
                        buffer.Add("R " + baseName + "reset_counter");
                        buffer.Add(startLabel.ToString() + ": NOP 0");
                        buffer.Add("");
                        //// Захват импульса
                        //      A     "I_17A02FC_COUNT"
                        //      FP    M     69.0
                        //      =     "DB_COUNTERS".FC17A02.pulse_signal

                        //// Инкремент счетчика на заданный шаг
                        //      A     "DB_COUNTERS".FC17A02.pulse_signal
                        //      A     "DB_COUNTERS".FC17A02.start_count
                        //      JNB   _111
                        //      L     "DB_COUNTERS".FC17A02.summator
                        //      L     "DB_COUNTERS".FC17A02.step
                        //      +D    
                        //      T     "DB_COUNTERS".FC17A02.summator
                        //_111: NOP   0

                        //// Сброс счетчика
                        //      A     "DB_COUNTERS".FC17A02.reset_counter
                        //      FP    M     69.2
                        //      JCN   _112

                        //      L     "DB_COUNTERS".FC17A02.summator
                        //      T     "DB_COUNTERS".FC17A02.summator_prev
                        //      L     0
                        //      T     "DB_COUNTERS".FC17A02.summator

                        //      R     "DB_COUNTERS".FC17A02.reset_counter

                        //_112: NOP   0

                        M++;
                    }
                }
            }
            return buffer;
        }

        /// <summary>
        /// Округление до 5-ти в большу сторону
        /// </summary>
        /// <param name="x">Число, которое необходимо округлить</param>
        /// <returns></returns>
        private int roundToFive(int x)
        {
            int r = 0;
            int b = 0;
            int max = 100;

            for (int j = 1; j < max; j++)
            {
                if ((b <= x) & (x <= b + 5))
                {
                    r = b + 5;
                    break;
                }

                b = b + 5;
            }
            return r;
        }

        /// <summary>
        /// Генерация текста исходного кода для заданного элемента списка сигналов
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        private ObservableCollection <string> return_PeripheryCode(mSymbolTableItem item)
        {
            ObservableCollection<string> p = new ObservableCollection<string>();

            string load_path = item.DB_FullName + "." + item.DB_ArrayName + "[" + item.DB_ArrayIndex + "]." + item.DeviceTag + ";";
            string load_symbol = "\"" + item.SignalName + "\";";
            string load_A = "A ";
            string load_AN = "AN ";
            string load_eq = "= ";
            string load_L = "L ";
            string load_T = "T ";

            string t = item.SignalType;
            

            switch (t)
            {
                case "Q":
                    p.Add(load_A + load_path);
                    p.Add(load_eq + load_symbol);
                    break;
                case "I":
                    if (item.DeviceType.Equals("Y"))
                    {
                        p.Add(load_AN + load_symbol);
                    }
                    else
                        p.Add(load_A + load_symbol);
                    p.Add(load_eq + load_path);
                    break;
                case "IW":
                    p.Add(load_L + load_symbol);
                    p.Add(load_T + load_path);
                    break;
                case "QW":
                    //p.Add(load_L + load_path);
                    p.Add(load_L + item.DB_FullName + ".LMN;");
                    p.Add(load_T + load_symbol);
                    break;
                default:
                    p.Add("// There no automated generated code for " + item.Codename);
                    p.Add("NOP 0");
                    p.Add("// ");
                    break;
            }
          
            return p;
        }

        private List<string> source_FCopen(string FCname)
        {

            List<string> result = new List<string>();

            result.Add("");
            result.Add("//******* Function " + FCname + " ********");
            result.Add("FUNCTION \"" + FCname + "\" : VOID");
            result.Add("Title = " + FCname);
            result.Add("AUTHOR:  Kratovi4");
            result.Add("VERSION: 3.0");
            result.Add("BEGIN");
            result.Add("NETWORK");
            result.Add("");
            result.Add("");

            return result;
        }

        private List<string> source_FCclose()
        {
            List<string> result = new List<string>();
            result.Add("");
            result.Add("END_FUNCTION");
            return result;
        }

        private List<string> parse_codeFromFile(string filename)
        {
            List<string> result = new List<string>();

            try
            {

                var lines = File.ReadAllLines(filename);
                result.AddRange(lines);
            }
            catch (Exception e)
            {
                result.Add(e.Message);
            }

            return result;
        }

        public void mergePeripheryFiles()
        {
            var filenames = Directory
                .EnumerateFiles(rootdir, "*", SearchOption.TopDirectoryOnly)
                .Select(Path.GetFullPath);
            List<string> buffer = new List<string>();

            try
            {  
                foreach (string f in filenames)
                {
                    if (f.Contains("periphery"))
                    {
                        buffer.AddRange(File.ReadAllLines(f));
                    }
                }

                buffer.Add("");

                File.WriteAllLines(rootdir + "\\STL_ALL_PERIPHERY.txt", buffer);
            }
            catch (Exception e)
            {
                File.WriteAllText(rootdir + "\\STL_ALL_PERIPHERY.txt", e.Message);
            }

            
        }
    }


   

    

}
